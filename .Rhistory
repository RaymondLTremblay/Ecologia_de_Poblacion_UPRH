lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
# PASO 3: Agregue una estructura espacial (no se aplica aquí)
# PASO 4: ¡Simular!
####
# Parámetros de simulación básicos
####
nyears <- 100     # número de años
nreps <- 500    # número de réplicas
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))   # configurar matriz de almacenamiento
## empezar a recorrer las réplicas
for(rep in 1:nreps){
# establecer abundancia inicial
PopArray2[1,rep] <- Init_N     # establecer la abundancia inicial
### recorrer años: loop through years
for(y in 2:(nyears+1)){
### estocasticidad y d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catástrofe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
### Run the PVA!
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
# PASO 5: resultados
############
# Visualización gráfica
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
# Visualice las tasas de extinción a lo largo del tiempo
Extinction_byyear <- function(simdata){
apply(simdata,1,function(t)  length(which(t==0)))/ncol(simdata)
}
plot(c(1:101),Extinction_byyear(Default),type="l",lwd=2,xlab="year",ylab="extinction risk")
abline(h=0.05,col="red",lwd=2)
# visualizar la abundancia final después de 100 años en relación con la abundancia inicial
hist(Default[nrow(Default),],xlab="Final abundance after 100 years",ylab="Number of replicates",main="")
abline(v=Init_N,col="green",lwd=2)
# plot probabilities of different severities of declinegraficar las probabilidades de diferentes grados de declive
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(Default),]<(Init_N-(declines[s]/100)*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline threshold (percent)",ylab="Probability of falling below threshold")
abline(v=25,col="red",lwd=2)
# plot probabilities of different severities of declinegraficar las probabilidades de diferentes grados de declive
declines <- seq(0,100,by=1)
declineprob <- numeric(length(declines))
for(s in 1:length(declines)){
declineprob[s] <- length(which(Default[nrow(Default),]<(Init_N-(declines[s]/100)*Init_N)))/ncol(Default)
}
plot(declines,declineprob,type="l",lwd=2,xlab="Decline threshold (percent)",ylab="Probability of falling below threshold")
abline(v=25,col="red",lwd=2)
# Grafique el riesgo de extinción en función de la gravedad de las inundaciones
Exctinction_risk <- function(simdata){
length(which(simdata[nrow(simdata),]==0))/ncol(simdata)
}
flood_lambdas <- seq(0.9,0.1,by=-0.05)
all_scenarios <- numeric(length(flood_lambdas))
for(scenario in 1:length(flood_lambdas)){
PVA <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,flood_lambdas[scenario])
all_scenarios[scenario] <- Exctinction_risk(PVA)
}
plot(flood_lambdas,all_scenarios,type="p",cex=2,xlab="flood impact (lambda in flood year)",ylab="extinction risk")
abline(h=0.05,col="red",lwd=2)
#install.packages(c('tinytex', dependencies=T))
##############
# Demostración PVA
##############
# PASO 1: conceptualice la historia de vida (estamos modelando esta población como un modelo estocástico simple de una etapa con dependencia de la densidad)
# PASO 2: parametrizar el modelo
####
# Parámetros básicos de la historia de vida
####
R_max <- 1.15       # Tasa máxima de crecimiento
Init_N <- 500        # Abundancia inicial
K <- 50            # Capacidad de carga
####
# Estocasticidad ambiental
####
SD_anngrowth <- 0.01  # desviación estándar de la tasa de crecimiento anual
####
# Densidad-dependencia (modelo de Ricker)
####
Ricker <- function(prev_abund){       # esta es una función para calcular la abundancia del próximo año - incluye estocasticidad env
prev_abund * exp(log(rnorm(1,R_max,SD_anngrowth))*(1-(prev_abund/K)))
}
####
# Catástrofe
####
Flood_prob <- 0.05      # 5% probabilidad de una gran inundación
Flood_lambda <- 0.25    # 25% de la población puede sobrevivir a una inundación
# PASO 3: Agregue una estructura espacial (no se aplica aquí)
# PASO 4: ¡Simular!
####
# Parámetros de simulación básicos
####
nyears <- 100     # número de años
nreps <- 500    # número de réplicas
PVAdemo <- function(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda){
#browser()
PopArray2 <- array(0,dim=c((nyears+1),nreps))   # configurar matriz de almacenamiento
## empezar a recorrer las réplicas
for(rep in 1:nreps){
# establecer abundancia inicial
PopArray2[1,rep] <- Init_N     # establecer la abundancia inicial
### recorrer años: loop through years
for(y in 2:(nyears+1)){
### estocasticidad y d-d
nextyear <- max(0,trunc(Ricker(PopArray2[y-1,rep])))
### catástrofe
if(runif(1)<Flood_prob) nextyear <- nextyear*Flood_lambda
PopArray2[y,rep] <- nextyear
}
}
return(PopArray2)
}
### Run the PVA!
Default <- PVAdemo(nreps,nyears,Init_N,R_max,K,Flood_prob,Flood_lambda)
# PASO 5: resultados
############
# Visualización gráfica
PlotCloud <- function(simdata){
plot(c(1:101),simdata[,1],col=gray(0.7),type="l",ylim=c(0,max(simdata)),xlab="Years",ylab="Abundance")
for(r in 2:ncol(simdata)){
lines(c(1:101),simdata[,r],col=gray(0.7),type="l")
}
}
PlotCloud(Default)
knitr::opts_chunk$set(echo = TRUE)
library(popdemo)
library(popbio)
#remotes::install_github("jonesor/Rage")
library(Rage)
matU=matrix(c(
0.43, 	0,	    0.00,   0.00,
0.38,	  0.84,   0.00,	  0.00,
0, 	    0.00,	  0.51,	  0.15,
0,      0.14,   0.43,   0.84),
byrow=4, ncol=4)
matU
matF=matrix(c(
0, 	  0,	  0,    0.14,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF
TF=matU+matF
TF
colnames(TF) <- c("plantulas", "juveniles", "A no reprod", "A reprod")
rownames(TF) <- colnames(TF)
TF
orchid_names= c("1_plantulas", "2_juveniles", "3_adulto no reproductivos", "4_adultos reproductivos")
orchid_names_2= c("1", "2", "3", "4")
#stages <- c(TF_TF)
plot_life_cycle(TF)
#plot_life_cycle(TF, stages = orchid_names_2)
TF
library(popbio)
lambda(TF) # crecimiento de 3%
library(Rage)
matU1=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 1.43, 0.44
), byrow=4, ncol=4)
matU1
matF1=matrix(c(
0, 	  0,	  0,    0.14,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF1
TF1=matU1+matF1
TF1
lambda(TF1)
library(Rage)
matU2=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 0.43, 0.84
), byrow=4, ncol=4)
matU2
matF2=matrix(c(
0, 	  0,	  0,    3.6,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF2
TF2=matU2+matF2
lambda(TF2)
x=c(3,4,8,3,3,5,2,7,2,4,2,2,3,3,3)
sum(x)
mean(x)
library(popdemo)
isErgodic(TF, digits=10, return.eigvec=FALSE)
isIrreducible(TF)
plot_life_cycle(TF)
library(Rage)
matU4=matrix(c(
0.43, 	0,	    0,     0.00,
0.38,	  0.84, 	0,	   0,
0.00,   0,	    0.51,	 0.15,
0,      0.0,    0.43,  0.84
), byrow=4, ncol=4)
matU4  # ¿Cual es el problema con esa matriz?
matF4=matrix(c(
0, 	  0,	  0,    0.28,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF4
TF4=matU4+matF4
isErgodic(TF4)
isIrreducible(TF4)
plot_life_cycle(TF4)
library(Rage)
matU4=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.0, 0.43, 0.84
), byrow=4, ncol=4)
matU4  # ¿Cual es el problema con esa matriz?
matF4=matrix(c(
0, 	  0,	  0,    0.28,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF4
TF4=matU4+matF4
isIrreducible(TF4)
plot_life_cycle(TF4)
n0 <- c(10, 10, 10, 10)
pr1 <- project(TF, vector=n0, time=24)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
eigs <- eigen(TF)
eigs # los diferentes eigenvalue de la matrix. El que responde al crecimiento intrinsico de la población es la parte mayor real.
lambdamax <- Re(eigs$values[1]) # esta función seleciona para el primer valor
lambdamax
# Es más facil utilzar la siguiente función en el paquete popdemo
truelambda(TF) # Con el paquete popdemo
popbio::lambda(TF) # con el paquete popbio
library(popbio)
w <- stable.stage(TF)
w
barplot(w, col="green", ylim=c(0,1), las=1, main="Lepanthes rubripetala",
ylab="La proporción Etapa de Vida", xlab="Etapas de vida")
elas(TF)
#remotes::install_github("jonesor/Rage") # eso es para instalar el programa directo de github
matUCc=matrix(c(
0,	    0,   	     0,	    0,     0,
0.675,	0.703,     0,	    0,     0,
0,	    0.047,	   0.657,  0,    0,
0	,     0,	       0.019,	0.682, 0,
0,      0,         0,     0.061, 0.8091
), byrow=5, ncol=5)
matFCc=matrix(c(
0,	0,	0,	4.665, 61.896,
0,	0,	0,	0, 0,
0,	0,	0,	0, 0,
0,	0,	0,	0, 0,
0,  0,  0,  0, 0
), byrow=5, ncol=5)
matACc=matUCc+matFCc
matACc
plot_life_cycle(matACc)
colnames(matACc) <- c("Huevos", "small_juv(1-7yrs)", "Large_juv(8-15)", "Subadults(16-21)", "Adults(22+)")
rownames(matACc) <- colnames(matACc)
library(Rage)
plot_life_cycle(matACc) # life cycle with names
truelambda(matACc)
lambda(matACc)
nCc <- c(10, 10, 10, 10, 1000)
pr1 <- project(matACc, vector=nCc, time=240)
#Plot the projection. This uses an S3 plotting
#method for projections. For info, see '?plot.projection'.
plot(pr1)
matACc # the matrix matU
round(elas(matACc),digit=4) # elas=elasticities, en el paquete "popdemo"
stable.stage(matACc) # en el paquete popdemo
eigen(TF)
# Calcular a mano el damping.ratio
1.0296/abs(0.7709) # Calcular a mano
dr(TF, return.time=TRUE, x=10)
eigen(matACc)
matACc
0.95158/abs(0.711699)
dr(matACc)
dr(matACc, return.time=TRUE, x=10) # damping ratio
# convt, en popdemo
n=c(1000,0,0,0, 0)
convt(matACc, accuracy=1e-3, vector=n) # Convergence time to Stable Stage Distribution from an invasive species starting with smallest size
n1=c(238,648,103,7, 3)
convt(matACc, accuracy=1e-3, vector=n1) # Convergence time to Stable Stage Distribution when close to Stable Stage
n2=c(0,0,0,0,1000)
convt(matACc, accuracy=1e-3, vector=n2) # Convergence time to Stable Stage Distribution when starting with an invasive species of adults
par(mar=c(10,4,1,1))
n0.att <- c(1000,1,1,1) # La población es sesgada a una estructura de etapas pequeñas
n0.amp <- c(1,1,1,1000) # la población es sesgada a una estructura de etapas grandes
pr2.1amp <- project(TF, vector=n0.amp, time=50,
standard.A=T, standard.vec=T)
pr2.2att <- project(TF, vector=n0.att, time=50,
standard.A=T, standard.vec=T)
plot(pr2.2att, ylim=c(0.4,1.0), log="y", cex.axis=0.8)
text(30, pr2.2att[10], "attenuation",
adj=c(1,-0.5), cex=0.8)
plot(pr2.1amp, ylim=c(0.4,1.2), log="y", cex.axis=0.8)
text(30, pr2.1amp[10], "amplification",
adj=c(1,-.25), cex=0.8)
maxamp(TF )
reac(TF,bound = "upper")
inertia(TF,bound = "lower")
reac <- reac(TF, vector=n0.amp)
maxamp <- maxamp(TF,  return.t=T)
upinertia <- inertia(TF, vector=n0.amp)
TF
library(popbio)
lambda(TF) # crecimiento de 3%
TF
lambda(TF) # crecimiento de 3%
lambda(TF)^13 # crecimiento de 3%
lambda(TF) # crecimiento de 3%
library(raretrans)
library(Rage)
matU1=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 1.43, 0.44
), byrow=4, ncol=4)
matU1
matF1=matrix(c(
0, 	  0,	  0,    0.14,
0,	  0, 	  0,	  0,
0, 	  0,	  0,	  0,
0,    0,    0,    0
), byrow=4, ncol=4)
matF1
TF1=matU1+matF1
TF1
lambda(TF1)
priorTF=matrix(c(
0.43, 	0,	  0,    0.00,
0.38,	0.84, 	0,	  0,
0, 	    0,	  0.51,	0.15,
0,      0.14, 1.43, 0.44
), byrow=4, ncol=4)
priorTF
n=c(10,10, 10, 10)
N=c(10,10, 10, 10)
sim_transitions(
TF,
N,
P = NULL,
alpha = 1e-05,
beta = 1e-05,
priorweight = -1,
samples = 1
)
install.packages(c("bayestestR", "betareg", "binb", "bitops", "bookdown", "bslib", "checkmate", "cli", "clock", "colorspace", "crayon", "crul", "cubature", "dataRetrieval", "datawizard", "DescTools", "devEMF", "digest", "effectsize", "emmeans", "Exact", "fields", "fitdistrplus", "forecast", "foreign", "fpp3", "future", "gbm", "gert", "ggeffects", "gm", "gt", "gtsummary", "htmlTable", "httr2", "insight", "ipred", "knitr", "lme4", "locfit", "magick", "mmrm", "modeldata", "multcomp", "MuMIn", "nloptr", "NLP", "openxlsx", "parallelly", "parameters", "partykit", "pbkrtest", "performance", "pkgdown", "pkgload", "pls", "polyclip", "prodlim", "ps", "psych", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "Rdpack", "reactR", "recipes", "reprex", "rio", "rmcorr", "robustbase", "robustHD", "roxygen2", "s2", "segmented", "shiny", "simpleboot", "slam", "SparseM", "StanHeaders", "tinytex", "TMB", "tsibble", "ucminf", "usethis", "uuid", "websocket", "withr", "wk", "xfun", "yaml", "yulab.utils"))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(tidyverse)
library(kableExtra)
Notas=tribble(
~Componentes, ~Nota_porcentual,
"Lab exercises Vea prontuartio correspondiente",         "33%",
"Cuestionarios y participación",                         "10% (40 puntos)",
"Proyecto grupal de un tema",                            "25% (100 puntos)",
"Examen parcial n.°1 (fecha por determinar)",            "10% (40 puntos)",
"Trabajo de PVA (fecha por determinar)",                 "10% (40 puntos)",
"Examen final (fecha por determinar) ",                  "25% (100 puntos)",
)
kbl(Notas)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript_labanswers <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- c("answer","test")
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- grepl(input, pattern = stringToFind2[1], perl = TRUE) | grepl(input, pattern = stringToFind2[2])
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
library(tidyverse)
library(kableExtra)
Notas=tribble(
~Componentes, ~Nota_porcentual,
"Lab exercises Vea prontuartio correspondiente",         "33%",
"Cuestionarios y participación",                         "10% (40 puntos)",
"Proyecto grupal de un tema",                            "25% (100 puntos)",
"Examen parcial n.°1 (fecha por determinar)",            "10% (40 puntos)",
"Trabajo de PVA (fecha por determinar)",                 "10% (40 puntos)",
"Examen final (fecha por determinar) ",                  "25% (100 puntos)",
)
kbl(Notas)
rmarkdown::render('index.Rmd', 'word_document')
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript_labanswers <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- c("answer","test")
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- grepl(input, pattern = stringToFind2[1], perl = TRUE) | grepl(input, pattern = stringToFind2[2])
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE7.Rmd")  ##
rmd2rscript("LECTURE8.Rmd")
rmd2rscript("LECTURE15.Rmd")
rmd2rscript("LECTURE16.Rmd")
rmd2rscript("LECTURE17.Rmd")
rmd2rscript("LAB4.Rmd")  ##
install.packages("kableExtra")
